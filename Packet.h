//////////////////////////////////////////////////////////////////////////////////
//
// File: Packet.h
//
// Desc: DNS Packet object
//
//////////////////////////////////////////////////////////////////////////////////
#ifndef PACKET_H
#define PACKET_H

#include <string>

using namespace std;

//
// DNS Packet Structure
//
// +---------------------+
// |        Header       |
// +---------------------+
// |       Question      | the question for the name server
// +---------------------+
// |        Answer       | RRs answering the question (Not implemented)
// +---------------------+
// |      Authority      | RRs pointing toward an authority (Not implemented)
// +---------------------+
// |      Additional     | RRs holding additional information (Not implemented)
// +---------------------+
//

struct DNS_HEADER
{
	unsigned		id: 16;			// id for query generated by requester
#ifdef ENDIAN_LITTLE
	unsigned        rd :1;			// recursion desired
	unsigned        tc :1;			// truncated message
	unsigned        aa :1;			// authoritive answer
	unsigned        opcode :4;		// purpose of message
	unsigned        resp :1;		// response flag
	unsigned        rcode :4;		// response code
	unsigned        unused :3;		// unused bits
	unsigned        ra :1;			// recursion available
#endif
#ifdef ENDIAN_BIG
	unsigned        qr: 1;          // response flag
	unsigned        opcode: 4;      // purpose of message
	unsigned        aa: 1;          // authoritive answer
	unsigned        tc: 1;          // truncated message
	unsigned        rd: 1;          // recursion desired
	unsigned        ra: 1;          // recursion available
	unsigned        unused :3;      // unused bits
	unsigned        rcode :4;       // response code
#endif
	unsigned        qdcount :16;	// number of question entries
	unsigned        ancount :16;	// number of answer entries
	unsigned        nscount :16;	// number of authority entries
	unsigned        arcount :16;	// number of resource entries
};

struct DNS_QUESTION
{
	unsigned qtype :16;				// question type
	unsigned qclass :16;			// question class
};


//################################################################################
//##
//## Class: DNSPacket
//##
//##  Desc: One big public object that represents a DNS packet and contains some
//##		encoding/decoding mechanisms.
//##
//################################################################################

class DNSPacket
{
public:
	DNSPacket()
	: mRawPacketData(nullptr),
	  mRawPacketLen(0)
	{
	}
	virtual ~DNSPacket()
	{
		if (mRawPacketData)
		{
			free(mRawPacketData);
			mRawPacketData = nullptr;
			mRawPacketLen = 0;
		}
	}
	
	int SetRawData(unsigned char* inData, size_t inLen);
	int SetRawPacketID(unsigned short inID);
	int GetRawPacketID(unsigned short& outID);

	int	Decode();
	int	Encode(unsigned char *&outData, size_t &outDataLen, size_t inRemainsLen);
	void Print();

	static int DecodeAddrStr(
		unsigned char *&ioData, size_t &ioDataLen, string &outString);
	static int EncodeAddrStr(
		unsigned char *&ioData, size_t &ioDataLen, size_t &ioRemainsLen,
		string &inString);
	
	// Decoded Data
	DNS_HEADER		mHeader;
	string			mQuestionName;
	DNS_QUESTION 	mQuestion;
	
	// Raw Data
	unsigned char*	mRawPacketData;
	size_t			mRawPacketLen;
};


#endif

